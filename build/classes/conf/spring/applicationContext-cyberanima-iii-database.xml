<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.0.xsd 
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<bean id="dynamicDataSource" class="com.zwlsoft.service.dao.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String"></map> 
		</property>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dynamicDataSource" />
        </property>
    </bean>

 	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="configLocation" value="classpath:conf/spring/sqlmap-config.xml" />
		<property name="mapperLocations"> 
			<array>
				<value>classpath*:org/cyberanima/iii/common/mapper/**/*.xml</value>
			</array>			
		</property>
	</bean>
	
	<!-- 配置一个拦截器对象，处理具体的切换数据源的业务 -->
    <bean id="dataSourceMethodInterceptor" class="com.zwlsoft.service.dao.datasource.DataSourceMethodInterceptor"/>

    <!-- 参与动态切换数据源的切入点对象 (切入点对象，确定何时何地调用拦截器) -->
    <bean id="methodCachePointCut" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <!-- 配置缓存aop切面 -->
        <property name="advice" ref="dataSourceMethodInterceptor" />
        <!--  
            .表示符合任何单一字元                  
            ###  +表示符合前一个字元一次或多次                  
            ###  *表示符合前一个字元零次或多次                  
            ###  \Escape任何Regular expression使用到的符号                  
        -->                 

        <!-- .*表示前面的前缀(包括包名) 表示print方法-->
        <property name="patterns">
            <list>
                 <value>org.cyberanima.iii.*.service.impl.*Service*\.*.*</value>
            </list>
        </property>
     </bean>
    
    <bean id="sqlSession"  class="org.mybatis.spring.SqlSessionTemplate">  
          <constructor-arg index="0" ref="sqlSessionFactory" />  
    </bean> 
      
	<!-- 连接事务的注解配置 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<bean id="txInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="transactionManager"/>
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="create*">PROPAGATION_REQUIRED,-Exception</prop> 
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
				
			</props>
		</property>
	</bean>
	 
	<bean id="autoProxyCreator" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />
	
	<bean id="aspectJExpressionPointcutAdvisor" class="org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor"> 
		<property name="advice"> 
			<ref bean="txInterceptor" /> 
		</property> 
		<property name="expression"> 
			<value><![CDATA[execution(* org.cyberanima.iii..*.*ServiceImpl.*(..)) && @within(org.springframework.stereotype.Service) && 
			(execution(* create*(..)) || execution(* check*(..)) || execution(* delete*(..)) || execution(* update*(..)) || execution(* save*(..)))]]></value> 
		</property> 
	</bean>
	
	
</beans>